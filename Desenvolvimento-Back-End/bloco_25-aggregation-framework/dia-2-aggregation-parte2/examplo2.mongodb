db.products.insertMany([
  { "name": "Ball", "purchase_price": 7.6, "taxes": 1.9, "sale_price": 12.5, "quantity": 5 },
  { "name": "Baseball bat", "purchase_price": 18.5, "taxes": 5.3, "sale_price": 39.9, "quantity": 12 },
  { "name": "Sneakers", "purchase_price": 10.4, "taxes": 1.50, "sale_price": 14.9, "quantity": 3 },
  { "name": "Gloves", "purchase_price": 2.85, "taxes": 0.90, "sale_price": 5.70, "quantity": 34 },
  { "name": "Jacket", "purchase_price": 28.9, "taxes": 10.80, "sale_price": 59.9, "quantity": 20 },
  { "name": "Mousepad", "purchase_price": 16.6, "taxes": 3.40, "sale_price": 29.9, "quantity": 8 },
  { "name": "Monitor", "purchase_price": 119.9, "taxes": 39.20, "sale_price": 240.6, "quantity": 11 },
]);

// Expressão $add

// Para Fixar

// Calcule qual o custo total de cada produto, considerando o preço de compra e os impostos.
db.products.aggregate([
  {
    $project: { _id: 0, name: 1, total_cost: { $add: ["$purchase_price", "$taxes"] }}
  }
]);

// Expressão $subtract

// Calcule qual o lucro total de cada produto, considerando o preço de compra, os impostos e seu valor de venda.
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total_profit: {
        $subtract: [
          "$sale_price", { $add: ["$purchase_price", "$taxes"] }
        ]
      }
    }
  }
]);

// Expressão $ceil
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total_profit: {
        $ceil: {
          $subtract: [
            "$sale_price", { $add: ["$purchase_price", "$taxes"] }
          ]
        }
      }
    }
  }
]);

// Expressão $floor
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total_profit: {
        $floor: {
          $subtract: [
            "$sale_price", { $add: ["$purchase_price", "$taxes"] }
          ]
        }
      }
    }
  }
]);


// Expressão $round

// Para Fixar

// Retorne o menor número inteiro relativo ao preço de venda de cada produto
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      floored_price: { $floor: "$sale_price" }
    }
  }
]);

// Retorne o maior número inteiro relativo ao lucro total sobre cada produto. Nota: Desconsiderar taxas (taxes)
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      ceiling_price: {
        $ceil: {
          $subtract: [
            "$sale_price", "$purchase_price"
          ]
        }
      }
    }
  }
]);

db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      rounded_price: { $round: ["$purchase_price"] }
    }
  }
]);

// Expressão $abs

// 1. Calcule o valor absoluto do lucro total de cada produto.
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total_profit: {
        $abs: {
          $subtract: [
            "$sale_price", { $add: ["$purchase_price", "$taxes"] }
          ]
        }
      }
    }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      abs_total_profit: { $round: ["$total_profit"] }
    }
  }
]);


// Expressão $multiply

// Para Fixar

// 1. Calcule qual o valor total em estoque de cada produto, considerando o preço de venda e a quantidade;
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total_profit: {
        $multiply: ["$sale_price", "$quantity"]
      }
    }
  },
    {
    $project: {
      _id: 0,
      name: 1,
      inventory: { $round: ["$total_profit", 2]}
    }
  }
]);


// 2. Calcule qual será o lucro total de cada produto caso todo o estoque seja vendido.
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total_profit: {
        $multiply: [
          {
            $subtract: [
              "$sale_price",
              { $add: ["$taxes", "$purchase_price"] }
            ]
          }, 
          "$quantity"
        ]
      }
    }
  },
    {
    $project: {
      _id: 0,
      name: 1,
      profit: { $round: ["$total_profit", 2]}
    }
  }
]);

// Expressão $divide

// Para Fixar
// Calcule qual será o preço de venda de cada produto caso haja uma promoção de 50% de desconto.
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      new_price: {
        $subtract: [
          "$sale_price", {
            $multiply: [{ $divide: [50, 100] }, "$sale_price"
            ]
          }
        ]
      }
    }
  }
]);

// Estágio $addFields

// Para Fixar

// 1. Calcule o valor total do estoque, considerando que cada produto valha o mesmo que seu preço de venda. Lembre-se da quantidade.
db.products.aggregate([
  {
    $addFields: {   
      total_instock_value: {
        $multiply: ["$sale_price", "$quantity"]
      }
    }
  },
]);
