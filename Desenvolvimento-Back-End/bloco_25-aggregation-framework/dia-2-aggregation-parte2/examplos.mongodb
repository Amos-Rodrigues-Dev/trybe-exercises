// use example_db;
db.orders.insertMany([
  { _id: 1, item: "almonds", price: 12, ordered: 2 },
  { _id: 2, item: "pecans", price: 20, ordered: 1 },
  { _id: 3, item: "cookies", price: 10, ordered: 60 }
]);

// use example_db;
db.warehouses.insertMany([
  { _id: 1, stock_item: "almonds", warehouse: "A", instock: 120 },
  { _id: 2, stock_item: "pecans", warehouse: "A", instock: 80 },
  { _id: 3, stock_item: "almonds", warehouse: "B", instock: 60 },
  { _id: 4, stock_item: "cookies", warehouse: "B", instock: 40 },
  { _id: 5, stock_item: "cookies", warehouse: "A", instock: 80 }
]);

db.orders.aggregate([
  {
    $lookup: {
      from: "warehouses",
      let: { order_item: "$item", order_qty: "$ordered" },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: [ "$stock_item",  "$$order_item" ] },
                { $gte: [ "$instock", "$$order_qty" ] }
              ]
            }
          }
        },
        { $project: { stock_item: 0, _id: 0 } }
      ],
      as: "stockdata"
    }
  }
]);

// Em um novo paralelo com a linguagem SQL , teríamos algo como o seguinte:
SELECT * stockdata
// FROM orders
// WHERE stockdata IN (
//   SELECT warehouse, instock
//   FROM warehouses
//   WHERE stock_item = orders.item
//   AND instock >= orders.ordered
// );

// Para Fixar
// Utilizando o banco de dados agg_example , adicione a seguinte collection e faça os exercícios:

// use agg_example;
db.clients.insertMany([
  { name: "Dave America", State: "Florida" },
  { name: "Ned Flanders", State: "Alasca" },
  { name: "Mark Zuck", State: "Texas" },
  { name: "Edna Krabappel", State: "Montana" },
  { name: "Arnold Schuz", State: "California" },
  { name: "Lisa Simpson", State: "Florida" },
  { name: "Barney Gumble", State: "Texas" },
  { name: "Homer Simpson", State: "Florida" },
]);

db.transactions.insertMany([
  { value: 5900, from: "Dave America", to: "Ned Flanders", bank: 'International' },
  { value: 1000, from: "Mark Zuck", to: "Edna Krabappel", bank: 'FloridaBank' },
  { value: 209, from: "Lisa Simpson", to: "Dave America", bank: 'bankOfAmerica' },
  { value: 10800, from: "Arnold Schuz", to: "Mark Zuck", bank: 'JPMorgan' },
  { value: 850, from: "Barney Gumble", to: "Lisa Simpson", bank: 'Citigroup' },
  { value: 76000, from: "Ned Flanders", to: "Edna Krabappel", bank: 'JPMorgan' },
  { value: 1280, from: "Dave America", to: "Homer Simpson", bank: 'Citigroup' },
  { value: 7000, from: "Arnold Schuz", to: "Ned Flanders", bank: 'International' },
  { value: 59020, from: "Homer Simpson", to: "Lisa Simpson", bank: 'International' },
  { value: 100, from: "Mark Zuck", to: "Barney Gumble", bank: 'FloridaBank' },
]);

// 1. Selecione todos os clientes com as suas respectivas transações feitas;
db.clients.aggregate([
  {
    $lookup: {
      from: "transactions",
      let: { origin: "$name"},
      pipeline: [
        {
          $match: {
            $expr: { $eq: ["$from", "$$origin"] }
          }
        },
        { $project: { _id: 0 } }
      ],
      as: "makeded"
    }
  },
  { $project: { _id: 0 } }
]);

db.clients.aggregate([
  {
    $lookup: {
      from: "transactions",
      localField: "name",
      foreignField: "from",
      as: "makeded"
    }
  },
  { $project: { _id: 0, "makeded._id": 0 } }
]);

// Selecione os quatro primeiros clientes com as suas respectivas transações recebidas ordenados pelo estado em ordem alfabética;
db.clients.aggregate([
  {
    $lookup: {
      from: "transactions",
      let: { origin: "$name"},
      pipeline: [
        {
          $match: {
            $expr: { $eq: ["$to", "$$origin"] }
          }
        },
        { $project: { _id: 0 } }
      ],
      as: "makeded"
    }
  },
  { $project: { _id: 0 } },
  { $sort: { State: 1 } },
  { $limit: 4 }
]);


// Selecione todos os cliente do estado da "Florida" e suas respectivas transações recebidas.
db.clients.aggregate([
  {
    $match: {
      State: "Florida"
    }
  },
  {
    $lookup: {
      from: "transactions",
      let: { origin: "$name"},
      pipeline: [
        {
          $match: {
            $expr: { $eq: ["$to", "$$origin"] }
          }
        },
        { $project: { _id: 0 } }
      ],
      as: "makeded"
    }
  },
  { $project: { _id: 0 } }
]);
