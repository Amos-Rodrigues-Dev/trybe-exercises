"""Perceba que temos uma cole√ß√£o de valores
e opera√ß√µes que atuam sobre estes valores,
de acordo com o que foi definido pelo TAD."""
import sys


class Array:
    def __init__(self):
        self.data = []

    def __len__(self):
        # quando pedido o tamanho do array
        # retorne o tamanho de data
        return len(self.data)

    def __str__(self):
        # converte para string e exibe os valores de data
        return str(self.data)

    def get(self, index):
        return self.data[index]

    def set(self, index, value):
        self.data.insert(index, value)

    def remove(self, index):
        # removeremos o item, retornando-o
        return self.data.pop(index)

    def update(self, index, value):
        self.data[index] = value


# vamos inicializar e preencher uma estrutura de dados array
array = Array()
array.set(0, "Felipe")
array.set(1, "Ana")
array.set(2, "Shirley")
array.set(3, "Miguel")

# para acessar um elemento do array, utilizamos seu √≠ndice
print(array.get(0))  # sa√≠da: Felipe
print(array.get(2))  # sa√≠da: Shirley
print("-----")

# sys.getsizeof retorna o tamanho da lista em bytes
array_memory_size = sys.getsizeof(array.data)
print(f"{array_memory_size} bytes")
print("-----")

array.set(3, "Giovana")
# como um espa√ßo adicional √© reservado o valor n√£o √© modificado
array_memory_size = sys.getsizeof(array.data)
print(f"{array_memory_size} bytes")  # 88
print("-----")

array.set(4, "Alberto")
array.set(5, "Marta")
array.set(6, "T√∫lio")
array.set(7, "Michelle")
array_memory_size = sys.getsizeof(array.data)
print(f"{array_memory_size} bytes")  # 120
print("-----")

# podemos iterar sobre seus elementos da seguinte maneira
index = 0
# enquanto h√° elementos no array
while index < len(array):
    # recupera o elemento atrav√©s de um √≠ndice
    print("Index:", index, ", Nome:", array.get(index))
    index += 1

print(array.get(2))


# ... At√© agora inserimos somente ao final do nosso array. Mas e se
# precisarmos adicionar um elemento no in√≠cio, ou no meio?
# array = Array()

array.set(0, "Marcos")
array.set(1, "Patr√≠cia")
# print(array), internamente chama o m√©todo array.__str__() que implementamos
print(array)  # sa√≠da: ["Marcos", "Patr√≠cia"]

# inserindo no come√ßo do array
array.set(0, "Valeria")
print(array)  # sa√≠da: ["Valeria", "Marcos", "Patr√≠cia"]

# inserindo em uma posi√ß√£o intermedi√°ria
array.set(1, "Miguel")
print(array)  # sa√≠da: ['Valeria', 'Miguel', 'Marcos', 'Patr√≠cia']


# Quando inserimos um novo elemento no in√≠cio do array, todos os elementos j√°
# existentes s√£o deslocados √† direita, tendo seu √≠ndice modificado em 1.
# An√°logo a isto, quando adicionamos em uma posi√ß√£o intermedi√°ria, todos os
# elementos com √≠ndices posteriores ao inserido ser√£o movidos em uma posi√ß√£o.
array.set(0, "Marcos")
array.set(1, "Patr√≠cia")
print(array)  # sa√≠da: ['Marcos', 'Patr√≠cia']

array.remove(0)  # retorna a string "Marcos"
print(array)  # sa√≠da: ['Patr√≠cia']

# Que tal adicionarmos um m√©todo update que atualiza o valor a partir de um
# √≠ndice?
# üê¶ A assinatura deve ser def update(self, index, value):
array.update(0, "Am√≥s")
print(array)
